var documenterSearchIndex = {"docs":
[{"location":"api.html#The-DICEModel-Module","page":"API","title":"The DICEModel Module","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"DICEModel","category":"page"},{"location":"api.html#DICEModel","page":"API","title":"DICEModel","text":"DICEModel\n\nImplementation of the DICE 2023 model\n\nNotes:\n\nBased on DICE2023-b-4-3-10.gms and included files (Nonco2-b-4-3-1.gms and FAIR-beta-4-3-1.gms)\nVariable casing has been harmonized that all parameters and post-optimization computation have lower cases, and all optimization variables have upper case.\n\n\n\n\n\n","category":"module"},{"location":"api.html#Module-Index","page":"API","title":"Module Index","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [DICEModel]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"api.html#Detailed-API","page":"API","title":"Detailed API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [DICEModel]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"api.html#DICEModel.Parameters","page":"API","title":"DICEModel.Parameters","text":"Parameters\n\nThis structure contains the \"default\" parameters, which can eventually be modified using keyword arguments in the run_dice(pars) function (e.g. run_dice(a2base = 0.01)).\n\nThe structure first defines some \"raw\" parameters, and then some \"computed\" parameters (mostly arrays of ntsteps length). Both can be overridden with keyword arguments in the run_dice(pars) function. In particular, \"computed\" parameters can be overridden in two ways: either by overriding the raw parameters from which they are computed, or by computing the parameter in a different way (outside the model) and overriding the computed parameter.\n\nAvailable parameters:\n\ntstep: Years per period\nntsteps: Number of time periods\ngama: Capital elasticity in production function\npop1: Initial world population 2020 (millions)\npopadj: Growth rate to calibrate to 2050 population projection\npopasym: Asymptotic population (millions)\ndk: Depreciation rate on capital (per year)\nq1: Initial world output 2020 (trill 2019 USD)\nal1: Initial level of total factor productivity\nga1: Initial growth rate for TFP per 5 years\ndela: Decline rate of TFP per 5 years\ngsigma1: Initial growth of sigma (per year)\ndelgsig: Decline rate of gsigma per period\nasymgsig: Asymptotic sigma\ne1: Industrial emissions 2020 (GtCO2 per year)\nmiu1: Emissions control rate historical 2020\nfosslim: Maximum cumulative extraction fossil fuels (GtC)\ncumemiss0: Cumulative emissions 2020 (GtC)\na1: Damage intercept\na2base: Damage quadratic term\na3: Damage exponent\nexpcost2: Exponent of control cost function\npback2050: Cost of backstop in 2019$ per tCO2 (2050)\ngback: Initial cost decline of backstop cost per year\ncprice1: Carbon price in 2020 (2019$ per tCO2)\ngcprice: Growth rate of base carbon price per year\nlimmiu2070: Emission control limit from 2070\nlimmiu2120: Emission control limit from 2120\nlimmiu2200: Emission control limit from 2220\nlimmiu2300: Emission control limit from 2300\ndelmiumax: Emission control delta limit per period\nbetaclim: Climate beta\nelasmu: Elasticity of marginal utility of consumption\nprstp: Pure rate of social time preference\npi_val: Capital risk premium (renamed to avoid conflict with Julia's pi)\nk0: Initial capital stock (10^12 2019 USD)\nsiggc1: Annual standard deviation of consumption growth\nsrf: Scaling factor for discounting\nscale1: Multiplicative scaling coefficient\nscale2: Additive scaling coefficient\neland0: Carbon emissions from land 2015 (GtCO2 per year)\ndeland: Decline rate of land emissions (per period)\nf_misc2020: Non-abatable forcings 2020\nf_misc2100: Non-abatable forcings 2100\nf_ghgabate2020: Forcings of abatable non-CO2 GHG in 2020\nf_ghgabate2100: Forcings of abatable non-CO2 GHG in 2100\neco2eghgb2020: Emissions of abatable non-CO2 GHG (GtCO2e) in 2020\neco2eghgb2100: Emissions of abatable non-CO2 GHG (GtCO2e) in 2100\nemissrat2020: Ratio of CO2e to industrial CO2 in 2020\nemissrat2100: Ratio of CO2e to industrial CO2 in 2100\nfcoef1: Coefficient of non-CO2 abateable emissions\nfcoef2: Coefficient of non-CO2 abateable emissions\nyr0: Calendar year that corresponds to model year zero\nemshare0: Carbon emissions share into Reservoir 0\nemshare1: Carbon emissions share into Reservoir 1\nemshare2: Carbon emissions share into Reservoir 2\nemshare3: Carbon emissions share into Reservoir 3\ntau0: Decay time constant for Reservoir 0\ntau1: Decay time constant for Reservoir 1\ntau2: Decay time constant for Reservoir 2\ntau3: Decay time constant for Reservoir 3\nteq1: Thermal equilibration parameter for box 1\nteq2: Thermal equilibration parameter for box 2\nd1: Thermal response timescale for deep ocean\nd2: Thermal response timescale for upper ocean\nirf0: Pre-industrial IRF100\nirc: Increase in IRF100 with cumulative carbon uptake\nirt: Increase in IRF100 with warming\nfco22x: Forcings of equilibrium CO2 doubling\nmat0: Initial concentration in atmosphere in 2020 (GtC)\nres00: Initial concentration in Reservoir 0 in 2020 (GtC)\nres10: Initial concentration in Reservoir 1 in 2020 (GtC)\nres20: Initial concentration in Reservoir 2 in 2020 (GtC)\nres30: Initial concentration in Reservoir 3 in 2020 (GtC)\nmateq: Equilibrium concentration in atmosphere (GtC)\ntbox10: Initial temperature box 1 change in 2020 (°C)\ntbox20: Initial temperature box 2 change in 2020 (°C)\ntatm0: Initial atmospheric temperature change in 2020 (°C)\ntimes: Time periods sequence (0,5,10,...,400)\ntidx: Time periods index sequence (1,2,3,...,81)\nt0idx: Time periods index sequence (0,1,2,...,80)\nrartp: Risk-adjusted rate of time preference\nmiuup: Upper bounds on miu\nvarpcc: Variance of per capita consumption\nrprecaut: Precautionary rate of return\nrr1: STP factor without precautionary factor\nrr: STP with precautionary factor\noptlrsav: Optimal long-run savings rate used for transversality\nl_temp: Level of population and labor (temp, used only for its first value)\nl: Level of population and labor\nga: Growth rate of Total Factor Productivity\nal_temp: Level of total factor productivity (temp, used only for its first value)\nal: Level of total factor productivity\ncpricebase: Carbon price in base case\npbacktime: Backstop price 2019$ per ton CO2\nsig1: Carbon intensity 2020 kgCO2-output 2020\ngsig: Change in sigma (rate of decarbonization)\nsigma_temp: CO2-emissions output ratio (temp, used only for its first value)\nsigma: CO2-emissions output ratio\neland\nco2e_ghgabateb\nf_misc\nemissrat\nsigmatot\ncost1tot\n\n\n\n\n\n","category":"type"},{"location":"api.html#DICEModel.run_dice-Tuple{}","page":"API","title":"DICEModel.run_dice","text":"run_dice(;optimizer=optimizer_with_attributes(Ipopt.Optimizer,\"print_level\" => 5), bounds=Dict{String,Tuple{String,String}}(),kwargs...)\n\nRun the DICE model (currently v 2023), possibly with custom optimiser, bounds or parameters.\n\nThis function runs the DICE model and returns the results as a named tuple.\n\nFunction arguments\n\noptimizer': The optimiser to use and possibly its options. Defaults to: [optimizerwithattributes(Ipopt.Optimizer,\"print_level\" => 5)`].\nbounds`: A dictionary of equality or inequality constraints. Each constraint should be specified with the variable name as key and a two-element tuple as value. The first element is either \"<=\", \">=\" or \"==\", and the second element is the right-hand side of the constraint (a single value or a vector of ntimesteps length). Default: (empty dictionary). See the source code for the names of the model variables.\nkwargs: Keyword arguments to override the default parameter values. See the documentation for the [Parameters`](@ref) structure for the available model parameters. \n\nOutputs\n\nA named tuple containing the following fields: solved, status, times, tidx, the post_process computed values, the optimisation variables, the parameters structure (pars).\n\nExamples:\n\nres = run_dice()\nECO2_opt = res.ECO2\nplot(res.times[1:11] .+ 2020,ECO2_opt[1:11],ylim=(0,80), title=\"CO₂ emissions\",ylabel=\"GtCO₂/yr\",label=\"C/B optimal\", markershape=:circle, markercolor=:white)\n\nres_crazy = run_dice(optimizer=optimizer_with_attributes(Ipopt.Optimizer,\"print_level\" => 0), bounds = Dict(\"MIU\"=>(\"==\",1.0), \"TATM\"=>(\"<=\",15), \"Y\" =>(\">=\",[fill(floatmin(Float64),10);fill(0.1,71)]), \"ECO2\" =>(\"<=\",10000)), a2base = 0.01)\n\nNotes\n\nThe bounds add constraints to the problem, but do not replace hard written bounds in the model. In particular, the miuup parameter should be used instead for the upper limit of emission controls.\nBounds are always intended for the full time steps. If you need a bound for a subset of time steps (e.g. the first time step), you still need to assemble your full time array of the bound using floatmin(Float64) or floatmax(Float64) as appropriate.\n\n\n\n\n\n","category":"method"},{"location":"api.html#DICEModel.run_dice_scenario-Tuple{String}","page":"API","title":"DICEModel.run_dice_scenario","text":"run_dice_scenario(scenario::String)\n\nRun one of the \"official\" 11 scenarios in Nordhous's DICE 2023 model:\n\ncbopt: The C/B optimal scenario\nt2c:   The temperature constrained to max 2 °C scenario\nt15c:   The temperature constrained to max 1.5 °C scenario\naltdam: The alternative damage scenario\nparisext: The Paris extended scenario\nbase:     The base (current policies) scenario\nr5:       The scenario with discount rate of 5%\nr4:       The scenario with discount rate of 4%\nr3:       The scenario with discount rate of 3%\nr2:       The scenario with discount rate of 2%\nr1:       The scenario with discount rate of 1%\n\nTo run \"your own\" scenarios, use the function run_dice, where you can set the input parameters and constraints as you like.\n\nOutput\n\nA named tuple containing the following fields: solved, status, times, tidx, the post_process computed values and the optimization variables.\n\n\n\n\n\n","category":"method"},{"location":"api.html#DICEModel.@fields_to_vars-Tuple{Symbol, Any}","page":"API","title":"DICEModel.@fields_to_vars","text":"@fields_to_vars(t,x)\n\nUtility macro to convert a struct fields to local variables (for readibility, so that we can write parx instead of using everywhere p.parx).\n\n\n\n\n\n","category":"macro"},{"location":"results.html#Main-results","page":"Main Results","title":"Main results","text":"","category":"section"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"We report here some results from running the codepackage with the official scenarios and compare the output of DICEModel.jl with the official GAMS output as given in the DICE 2023 Introduction and User's Manual (v3.1.2, May 15, 2024)","category":"page"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"The scenarios we run here are:","category":"page"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"cbopt: The C/B optimal scenario\nt2c:   The temperature constrained to max 2 °C scenario\nt15c:   The temperature constrained to max 1.5 °C scenario\naltdam: The alternative damage scenario\nparisext: The Paris extended scenario\nbase:     The base (current policies) scenario\nr5:       The scenario with discount rate of 5%\nr4:       The scenario with discount rate of 4%\nr3:       The scenario with discount rate of 3%\nr2:       The scenario with discount rate of 2%\nr1:       The scenario with discount rate of 1%","category":"page"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"We start by loading the required packages.","category":"page"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"using Pkg\nPkg.activate(joinpath(@__DIR__,\"..\"))\n#Pkg.add([\"DICEModel\", \"CSV\",\"DataFrames\",\"Plots\"]) # Run once and comment this back\nusing DICEModel, CSV, DataFrames, Plots","category":"page"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"details: Show code\na = [1,2,3]\nb = vcat(a,1)","category":"page"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"# Scenarios to run\nscenarios = [\"cbopt\",\"t2c\",\"t15c\",\"altdam\",\"parisext\",\"base\",\"r5\",\"r4\",\"r3\",\"r2\",\"r1\"]\n# Run them and collect the results in the \"results\" dictionary\nresults = Dict([s => run_dice_scenario(s) for s in scenarios])\ntimes  = results[\"cbopt\"].times.+2020","category":"page"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"cbopt t2c t15c altdam parisext base r5 r4 r3 r2 r1","category":"page"},{"location":"results.html#ECO2-:-CO-emissions-[GtCO/yr]","page":"Main Results","title":"ECO2 : CO₂ emissions [GtCO₂/yr]","text":"","category":"section"},{"location":"results.html#Official-GAMS-outputs:","page":"Main Results","title":"Official GAMS outputs:","text":"","category":"section"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"# Data from the DICE2023 manual\nECO2_gams = CSV.read(IOBuffer(\"\"\"\nscen      2020  2025  2050  2100     \ncbopt     42.9  42.9  37.1  15.9 \nt2c       42.9  42.9  27.2   1.2\nt15c      42.9  13.1   5.7   0.0\naltdam    42.9  42.7  20.9   0.0  \nparisext  42.9  43.3  44.4  42.3    \nbase      42.9  44.9  54.6  75.7 \nr5        42.8  42.5  42.2  37.6\nr4        44.1  43.9  39.3  28.9\nr3        45.6  45.3  33.5  15.4\nr2        46.8  46.7  22.5   0.0\nr1        46.8  46.9  19.2   0.0\n\"\"\"), DataFrame, delim=\" \", ignorerepeated=true)","category":"page"},{"location":"results.html#DICEModel.jl-output","page":"Main Results","title":"DICEModel.jl output","text":"","category":"section"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"ECO2 = DataFrame([\n    scenarios,\n    [results[s].ECO2[1] for s in scenarios],\n    [results[s].ECO2[2] for s in scenarios],\n    [results[s].ECO2[7] for s in scenarios],\n    [results[s].ECO2[17] for s in scenarios],\n    ],\n    [\"scen\",\"2020\",\"2025\",\"2050\",\"2100\"]\n)","category":"page"},{"location":"results.html#Differences:","page":"Main Results","title":"Differences:","text":"","category":"section"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"ECO2_diff = copy(ECO2_gams);\nECO2_diff[:,2:end] .= ECO2_gams[:,2:end] .- ECO2[:,2:end]\nECO2_diff","category":"page"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"As you can see, there are only two minor differences in r5 for 2100 and, above all, for r1 in 2020.","category":"page"},{"location":"results.html#Plot:","page":"Main Results","title":"Plot:","text":"","category":"section"},{"location":"results.html","page":"Main Results","title":"Main Results","text":"plot(times[1:11] .+ 2020,results[\"cbopt\"].ECO2[1:11],ylim=(0,80), title=\"CO₂ emissions\",ylabel=\"GtCO₂/yr\",label=\"C/B optimal\", color=:blue4, markershape=:circle, markercolor=:white);\nplot!(times[1:11] .+ 2020,results[\"t2c\"].ECO2[1:11], label=\"T < 2 °C\", colour=:green, markershape=:cross, markercolor=:green);\nplot!(times[1:11] .+ 2020,results[\"parisext\"].ECO2[1:11], label=\"Paris ext\", colour=:red, linestyle=:dash)\nplot!(times[1:11] .+ 2020,results[\"base\"].ECO2[1:11], label=\"Base\", colour=:goldenrod3, markershape=:circle, markercolor=:goldenrod3)","category":"page"},{"location":"index.html#DICEModel.jl","page":"Index","title":"DICEModel.jl","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Documentation for DICEModel.jl","category":"page"}]
}
