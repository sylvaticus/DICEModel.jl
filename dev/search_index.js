var documenterSearchIndex = {"docs":
[{"location":"api.html#The-DICEModel-Module","page":"API","title":"The DICEModel Module","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"DICEModel","category":"page"},{"location":"api.html#DICEModel","page":"API","title":"DICEModel","text":"DICEModel\n\nImplementation of the DICE/RICE models\n\nNotes:\n\nOptimization based on DICE2023-b-4-3-10.gms and included files (Nonco2-b-4-3-1.gms and FAIR-beta-4-3-1.gms)\nVariable casing has been harmonized that all parameters and post-optimization computation have lower cases, and all optimization variables have upper case.\nDICE has been generalized to work with multiple regions, and it is present in particular a version that uses the structure of DICE 2023 and the regional distribution of initial values (production, emissions, capital, population...) of RICE2020.\n\n\n\n\n\n","category":"module"},{"location":"api.html#Module-Index","page":"API","title":"Module Index","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [DICEModel]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"api.html#Detailed-API","page":"API","title":"Detailed API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"Modules = [DICEModel]\nOrder   = [:constant, :type, :function, :macro]","category":"page"},{"location":"api.html#DICEModel.DICEParameters","page":"API","title":"DICEModel.DICEParameters","text":"DICEParameters\n\nRow and computed parameters for the optimization function.\n\nThis structure contains the \"default of the default\" parameters, which can eventually be modified using either keyword arguments in specific functions (each defining its own \"defaults\") or directly in the run_dice(pars) function (e.g. run_dice(a2base = [0.01])). This second method overrides the specific defaults of the DICE2013 function.\n\nThe structure first defines some \"raw\" parameters, and then some \"computed\" parameters (mostly matrices of ntsteps x nregions length). Both can be overridden with keyword arguments. In particular, \"computed\" parameters can be overridden in two ways: either by overriding the raw parameters from which they are computed, or by computing the parameter in a different way (outside the model) and overriding the computed parameter.\n\nAvailable parameters:\n\ntstep: Years per period\nntsteps: Number of time periods\nregions: Name of the regions\nweights: Utility weights to assign to each region. Note these are exogenous (default to equal weights), are NOT the Negishi weights.\ngamma: Capital elasticity in production function\npop1: Initial world population 2020 (millions)\npopadj: Growth rate to calibrate to 2050 population projection\npopasym: Asymptotic population (millions)\ndk: Depreciation rate on capital (per year)\nq1: Initial world output 2020 (trill 2019 USD)\nal1: Initial level of total factor productivity\nga1: Initial growth rate for TFP per 5 years\ndela: Decline rate of TFP per 5 years\ngsigma1: Initial growth of sigma (per year)\ndelgsig: Decline rate of gsigma per period\nasymgsig: Asymptotic sigma\ne1: Industrial emissions 2020 (GtCO2 per year)\nmiu1: Emissions control rate historical 2020\ncumemiss0: Cumulative emissions 2020 (GtC)\na1: Damage intercept\na2base: Damage quadratic term\na3: Damage exponent\nexpcost2: Exponent of control cost function\npback2050: Cost of backstop in 2019$ per tCO2 (2050)\nlimmiu2070: Emission control limit from 2070\nlimmiu2120: Emission control limit from 2120\nlimmiu2200: Emission control limit from 2220\nlimmiu2300: Emission control limit from 2300\ndelmiumax: Emission control delta limit per period\nbetaclim: Climate beta\nelasmu: Elasticity of marginal utility of consumption\nprstp: Pure rate of social time preference\npi_val: Capital risk premium (renamed to avoid conflict with Julia's pi)\nk0: Initial capital stock (10^12 2019 USD)\nsiggc1: Annual standard deviation of consumption growth\nsrf: Scaling factor for discounting\nscale1: Multiplicative scaling coefficient\nscale2: Additive scaling coefficient\neland0: Carbon emissions from land 2015 (GtCO2 per year)\ndeland: Decline rate of land emissions (per period)\nf_misc2020: Non-abatable forcings 2020\nf_misc2100: Non-abatable forcings 2100\nf_ghgabate2020: Forcings of abatable non-CO2 GHG in 2020\neco2eghgb2020: Emissions of abatable non-CO2 GHG (GtCO2e) in 2020\neco2eghgb2100: Emissions of abatable non-CO2 GHG (GtCO2e) in 2100\nemissrat2020: Ratio of CO2e to industrial CO2 in 2020\nemissrat2100: Ratio of CO2e to industrial CO2 in 2100\nfcoef1: Coefficient of non-CO2 abateable emissions\nfcoef2: Coefficient of non-CO2 abateable emissions\nyr0: Calendar year that corresponds to model year zero\nemshare0: Carbon emissions share into Reservoir 0\nemshare1: Carbon emissions share into Reservoir 1\nemshare2: Carbon emissions share into Reservoir 2\nemshare3: Carbon emissions share into Reservoir 3\ntau0: Decay time constant for Reservoir 0\ntau1: Decay time constant for Reservoir 1\ntau2: Decay time constant for Reservoir 2\ntau3: Decay time constant for Reservoir 3\nteq1: Thermal equilibration parameter for box 1\nteq2: Thermal equilibration parameter for box 2\nd1: Thermal response timescale for deep ocean\nd2: Thermal response timescale for upper ocean\nirf0: Pre-industrial IRF100\nirc: Increase in IRF100 with cumulative carbon uptake\nirt: Increase in IRF100 with warming\nfco22x: Forcings of equilibrium CO2 doubling\nmat0: Initial concentration in atmosphere in 2020 (GtC)\nres00: Initial concentration in Reservoir 0 in 2020 (GtC)\nres10: Initial concentration in Reservoir 1 in 2020 (GtC)\nres20: Initial concentration in Reservoir 2 in 2020 (GtC)\nres30: Initial concentration in Reservoir 3 in 2020 (GtC)\nmateq: Equilibrium concentration in atmosphere (GtC)\ntbox10: Initial temperature box 1 change in 2020 (°C)\ntbox20: Initial temperature box 2 change in 2020 (°C)\ntatm0: Initial atmospheric temperature change in 2020 (°C)\ntimes: Time periods sequence (0,5,10,...,400)\ntidx: Time periods index sequence (1,2,3,...,81)\nt0idx: Time periods index sequence (0,1,2,...,80)\nnreg: Number of regions\nridx: Regions index sequence\nrartp: Risk-adjusted rate of time preference\nmiuup: Upper bounds on miu\nvarpcc: Variance of per capita consumption\nrprecaut: Precautionary rate of return\nrr1: STP factor without precautionary factor\nrr: STP with precautionary factor\noptlrsav: Optimal long-run savings rate used for transversality\nl_temp: Level of population and labor (temp, used only for its first value)\nl: Level of population and labor\nga: Growth rate of Total Factor Productivity\nal_temp: Level of total factor productivity (temp, used only for its first value)\nal: Level of total factor productivity\npbacktime: Backstop price 2019$ per ton CO2\nsig1: Carbon intensity 2020 kgCO2-output 2020\ngsig: Change in sigma (rate of decarbonization)\nsigma_temp: CO2-emissions output ratio (temp, used only for its first value)\nsigma: CO2-emissions output ratio\neland\nco2e_ghgabateb\nf_misc\nemissrat\nsigmatot\ncost1tot\n\n\n\n\n\n","category":"type"},{"location":"api.html#DICEModel.DICE2023-Tuple{}","page":"API","title":"DICEModel.DICE2023","text":"DICE2023()\n\nParameters constructor with defaults aligned to DICE2023. \n\nCreate a parameters struct with the defaults of the DICE2023 model. Different parameters, either the \"raw\" ones or the \"computed ones\", can be specified using keywork arguments.\n\nSee DICEParameters for a complete list of available parameters.\n\nExample\n\nalt_dam_scen = DICE2023(a2base = [0.01]) # single value array parameter for the \"world region\"\n\nNote\n\nEven if DICE2023 treats the World as a single region, the model works with a \"regional\" dimension, so all parameters (except those related to the carbon cycle) should be entered as a single-value array for static data or a (ntime_periods by nregions) matrix for (computed) dynamic parameters.\n\n\n\n\n\n","category":"method"},{"location":"api.html#DICEModel.DICE2023_NREG","page":"API","title":"DICEModel.DICE2023_NREG","text":"DICE2023_NREG(n;kwargs...)\n\nBuild parameters for a DICE2023 world partitioned in n equal regions (unless parameters are overrided)\n\nCreate a parameters struct where the world is partitioned in n regions, and where each region is equal, with the same coefficients but with 1/n of initial emissions, capital, production, population, ...\n\nData is from DICE2013, so the output of DICE2023_NREG(1) is the same as DICE2023().\n\nUsing the keyword arguments one can specify individual parameters that differ from DICE2023, with eventually a regional specification.\n\nSee DICEParameters for a complete list of available parameters and run_dice to run the optimization with the parameter struct created with this function.\n\nExample\n\nfour_regions_parameters = DICE2023_NREG(4) \nalt_dam_parameters      = DICE2023_NREG(2, a2base = [0.01, 0.02]) # two regions differing only for the a2base parameter\nresults = run_dice(four_regions_parameters)\n\n\n\n\n\n","category":"function"},{"location":"api.html#DICEModel.RICE2023-Tuple{}","page":"API","title":"DICEModel.RICE2023","text":"RICE2023(;kwargs...)\n\nBuild parameters calibrated to have the DICE2023 world totals and the 12-regions RICE2020 regional distribution.\n\nCreate a parameters struct where the world is partitioned in 12 regions, with coefficients of DICE2023 but a regional variance derived in most cases from RICE2020 (initial emissions, capital, production, population) or assumed (e.g. damages)\n\nNote that the utility weights to provide to each region are exogenous (default to equal weights), they are NOT the Negishi weights. The run_dice function can eventually be used iteractively to look for these weights.\n\nSee DICEParameters for a complete list of available parameters and run_dice to run the optimization with the parameter struct created with this function.\n\nExample\n\nw_rich  = [5,4,3,3,1,1,3,2,2,1,1.5,1] #\nw_equal = fill(1,12)\nres_cbopt_12r_poor = run_dice(RICE2023(;weights=w_poor))\nres_cbopt_12r_rich = run_dice(RICE2023(;weights=w_rich)) \n\nNotes\n\nThe default 12 regions are: [\"USA\", \"EUS\", \"JPN\", \"OHI\", \"RUS\", \"EEC\", \"CHN\", \"IND\", \"MDE\", \"SSA\", \"LAA\", \"ROW\"]\n\n\n\n\n\n","category":"method"},{"location":"api.html#DICEModel.run_dice-Tuple{DICEParameters}","page":"API","title":"DICEModel.run_dice","text":"run_dice(parameters;optimizer,bounds)\nrun_dice(;optimizer,bounds,kwargs...)\n\nRun the D(R)ICE models (currently with the structure and, by default, the data of DICE2023), possibly with custom optimiser, bounds or parameters.\n\nThis function runs the DICE model and returns the results as a named tuple. Note that starting from DICEModel v0.2, a regional dimension is always present, and DICE is simply treated as RICE with a single region.  \n\nFunction arguments\n\nPositional:\n\nparameters: An istance of the DICEModel struct containing the needed parameters\n\nKeyword arguments:\n\noptimizer': The optimiser to use and possibly its options. Defaults to: [optimizer = optimizerwithattributes(Ipopt.Optimizer,\"printlevel\" => 0, \"maxwalltime\"=>10.0^20, \"maxcputime\" => 10.0^20, \"maxiter\" => 3000, \"acceptabletol\" =>10^-6, \"acceptableiter\" => 15, \"acceptabledualinftol\" =>10.0^10, \"acceptableconstrvioltol\" => 0.01, \"acceptablecomplinftol\" =>0.01, \"acceptableobjchangetol\" =>10.0^20)`]. All, except the print levels, are the Ipopt defaults.\nbounds`: A dictionary of equality or inequality constraints. Each constraint should be specified with the variable name as key and a two-element tuple as value. The first element is either \"<=\", \">=\" or \"==\", and the second element is the right-hand side of the constraint (a single value, a vector of ntimesteps length or a matrix of ntimesteps x nregions). Default: (empty dictionary). See the source code for the names of the model variables.\nkwargs: Keyword arguments to override the default parameter values of DICE2023. See the documentation for the [DICEParameters`](@ref) structure for the available model parameters. \n\nWARNING: Sometimes changing a parameter doesn't lead to the expected behavior. This is because the model (in its original GAMS form that has been re-implemented in this package) performs some calibrations with the parameters, so several parameters have to be changed together. For example all the scenarios that test different discount rates don't change only the prstp parameter, but compute several other parameters, sometimes in a different matter than the default model, and have different calibration for initial conditions. Always check the source code to make sure that the parameter you want to change doesn't have other side effects in the model.\n\nOutputs\n\nA named tuple containing the following fields: solved, status, times, tidx, the post_process computed values, the optimisation variables, the parameters structure (pars).\n\nExamples:\n\nres = run_dice()\nECO2_opt = res.ECO2\nplot(res.times[1:11] .+ 2020,ECO2_opt[1:11],ylim=(0,80), title=\"CO₂ emissions\",ylabel=\"GtCO₂/yr\",label=\"C/B optimal\", markershape=:circle, markercolor=:white)\n\nres_crazy = run_dice(optimizer=optimizer_with_attributes(Ipopt.Optimizer,\"print_level\" => 0), bounds = Dict(\"MIU\"=>(\"==\",1.0), \"TATM\"=>(\"<=\",15), \"Y\" =>(\">=\",[fill(floatmin(Float64),10);fill(0.1,71)]), \"ECO2\" =>(\"<=\",10000)), a2base = 0.01)\n\nw_dev_country_priority = [1,1,1,1.5,2,2,3,3,2,5,5,5] # Utility weights by region\nres_12regions_devprior = run_dice(RICE2023(;weights=w_dev_country_priority))\n\nNotes\n\nThe bounds add constraints to the problem, but do not replace hard written bounds in the model. In particular, the miuup parameter should be used instead for the upper limit of emission controls.\nBounds are always intended for the full time steps. If you need a bound for a subset of time steps (e.g. the first time step), you still need to assemble your full time array of the bound using floatmin(Float64) or floatmax(Float64) as appropriate.\nThe version with keywords arguments is a tiny wrapper (calls) the version with the parameters struct, itself built using the DICE2023 function with the provided keyword arguments.\nThe weights used in the DICEParameters struct are exogenous, are NOT the Negishi weights. The run_dice function can eventually be used iteractively to look for these weights.\n\n\n\n\n\n","category":"method"},{"location":"api.html#DICEModel.run_dice_scenario-Tuple{String}","page":"API","title":"DICEModel.run_dice_scenario","text":"run_dice_scenario(scenario::String)\n\nRun one of the \"official\" 11 scenarios in Nordhous's DICE 2023 model:\n\ncbopt: The C/B optimal scenario\nt2c:   The temperature constrained to max 2 °C scenario\nt15c:   The temperature constrained to max 1.5 °C scenario\naltdam: The alternative damage scenario\nparisext: The Paris extended scenario\nbase:     The base (current policies) scenario\nr5:       The scenario with discount rate of 5%\nr4:       The scenario with discount rate of 4%\nr3:       The scenario with discount rate of 3%\nr2:       The scenario with discount rate of 2%\nr1:       The scenario with discount rate of 1%\n\nTo run \"your own\" scenarios, use the function run_dice, where you can set the input parameters and constraints as you like.\n\nOutput\n\nA named tuple containing the following fields: solved, status, times, tidx, the post_process computed values and the optimization variables.\n\n\n\n\n\n","category":"method"},{"location":"results.html#DICE-Results","page":"Results","title":"DICE Results","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"In this page we report the results from running the package with the official scenarios and compare the output of DICEModel.jl with the official GAMS output as given in the DICE 2023 Introduction and User's Manual (v3.1.2, May 15, 2024)","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"The scenarios considered are:","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"cbopt:    The C/B optimal scenario\nt2c:      The temperature constrained to max 2 °C scenario\nt15c:     The temperature constrained to max 1.5 °C scenario\naltdam:   The alternative damage scenario\nparisext: The Paris extended scenario\nbase:     The base (current policies) scenario\nr5:       The scenario with discount rate of 5%\nr4:       The scenario with discount rate of 4%\nr3:       The scenario with discount rate of 3%\nr2:       The scenario with discount rate of 2%\nr1:       The scenario with discount rate of 1%","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"Pages = [\"results.md\"]\nDepth = 4","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"We start by loading the required packages.","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nusing Pkg\nPkg.activate(joinpath(@__DIR__,\"..\"))\n#Pkg.add([\"DICEModel\", \"CSV\",\"DataFrames\",\"Plots\"]) # Run once and comment this back\nusing DICEModel, CSV, DataFrames, Plots, XLSX\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"We can now define the scenarios to run and their specific graphical attributed when plotted.  Finally we call the function run_dice_scenario with each of them and save the output in the results dictionary (keyed by the scenario name):","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\n# Scenarios to run:\nscenarios = [\"cbopt\",\"t2c\",\"t15c\",\"altdam\",\"parisext\",\"base\",\"r5\",\"r4\",\"r3\",\"r2\",\"r1\"]\nplot_attributes = Dict(\n    \"cbopt\"    => (label=\"C/B optimal\", linestyle=:solid, colour=:red, markershape=:circle, markercolor=:white, markerstrokecolor=:red),  \n    \"t2c\"      => (label=\"T < 2 °C\", linestyle=:dash, colour=:green, markershape=:cross, markercolor=:green, markerstrokecolor=:green),     \n    \"t15c\"     => (label=\"T < 1.5 °C\", linestyle=:dot, colour=:lime, markershape=:dtriangle, markercolor=:lime, markerstrokecolor=:lime),     \n    \"altdam\"   => (label=\"Alt. damage\", linestyle=:solid, colour=:darkgoldenrod4, markershape=:none, markercolor=:darkgoldenrod4, markerstrokecolor=:darkgoldenrod4),   \n    \"parisext\" => (label=\"Paris ext\", linestyle=:dash, colour=:darkorange, markershape=:cross, markercolor=:darkorange, markerstrokecolor=:darkorange), \n    \"base\"     => (label=\"Base\", linestyle=:solid, colour=:yellow, markershape=:utriangle, markercolor=:yellow, markerstrokecolor=:yellow),     \n    \"r5\"       => (label=\"R = 5%\", linestyle=:solid, colour=:darkblue, markershape=:diamond, markercolor=:darkblue, markerstrokecolor=:darkblue),       \n    \"r4\"       => (label=\"R = 4%\", linestyle=:dash, colour=:blue, markershape=:diamond, markercolor=:blue, markerstrokecolor=:blue),       \n    \"r3\"       => (label=\"R = 3%\", linestyle=:solid, colour=:deepskyblue4, markershape=:diamond, markercolor=:deepskyblue4, markerstrokecolor=:deepskyblue4),     \n    \"r2\"       => (label=\"R = 2%\", linestyle=:dash, colour=:steelblue, markershape=:diamond, markercolor=:steelblue, markerstrokecolor=:steelblue),        \n    \"r1\"       => (label=\"R = 1%\", linestyle=:solid, colour=:lightskyblue, markershape=:diamond, markercolor=:lightskyblue, markerstrokecolor=:lightskyblue)      \n)\n# Run the scenarios and collect their results in the \"results\" dictionary\nresults = Dict([s => run_dice_scenario(s) for s in scenarios])\ntimes  = results[\"cbopt\"].times.+2020\nnothing #hide","category":"page"},{"location":"results.html#Main-results-and-comparison-with-the-official-GAMS-version","page":"Results","title":"Main results and comparison with the official GAMS version","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"For the variables ECO2, ppm, TATM, MIU, CPRICE and scc, we show the official values, the ones computed with DICEModel.jl and we plot these values.","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"","category":"page"},{"location":"results.html#ECO2-:-CO-emissions-[GtCO/yr]","page":"Results","title":"ECO2 : CO₂ emissions [GtCO₂/yr]","text":"","category":"section"},{"location":"results.html#Official-GAMS-outputs:","page":"Results","title":"Official GAMS outputs:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\n# Data from the DICE2023 manual\nECO2_gams = CSV.read(IOBuffer(\"\"\"\nscen      2020  2025  2050  2100     \ncbopt     42.9  42.9  37.1  15.9 \nt2c       42.9  42.9  27.2   1.2\nt15c      42.9  13.1   5.7   0.0\naltdam    42.9  42.7  20.9   0.0  \nparisext  42.9  43.3  44.4  42.3    \nbase      42.9  44.9  54.6  75.7 \nr5        42.8  42.5  42.2  37.6\nr4        44.1  43.9  39.3  28.9\nr3        45.6  45.3  33.5  15.4\nr2        46.8  46.7  22.5   0.0\nr1        46.8  46.9  19.2   0.0\n\"\"\"), DataFrame, delim=\" \", ignorerepeated=true)\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"ECO2_gams  #hide","category":"page"},{"location":"results.html#DICEModel.jl-output","page":"Results","title":"DICEModel.jl output","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nECO2 = DataFrame([\n    scenarios,\n    [results[s].ECO2[1] for s in scenarios],\n    [results[s].ECO2[2] for s in scenarios],\n    [results[s].ECO2[7] for s in scenarios],\n    [results[s].ECO2[17] for s in scenarios],\n    ],\n    [\"scen\",\"2020\",\"2025\",\"2050\",\"2100\"]\n)\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"ECO2 #hide","category":"page"},{"location":"results.html#Differences:","page":"Results","title":"Differences:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nECO2_diff = copy(ECO2_gams);\nECO2_diff[:,2:end] .= ECO2_gams[:,2:end] .- ECO2[:,2:end]\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"ECO2_diff #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"There are only two minor differences in r5 for 2100 and, above all, for r1 in 2020.","category":"page"},{"location":"results.html#Plot:","page":"Results","title":"Plot:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nscenarios_plot=[\"base\",\"cbopt\",\"parisext\",\"t2c\",\"r2\",\"r1\"]\np = plot()\nfor(i,s) in enumerate(scenarios_plot)\n    if i == 1\n        global p = plot(times[1:11] ,results[s].ECO2[1:11],ylim=(0,80), title=\"CO₂ emissions\",ylabel=\"GtCO₂/yr\";plot_attributes[s]...);\n    else\n        plot!(times[1:11] ,results[s].ECO2[1:11];plot_attributes[s]...)\n    end\nend\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"p #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"","category":"page"},{"location":"results.html#ppm:-CO-concentration-[ppm]","page":"Results","title":"ppm: CO₂ concentration [ppm]","text":"","category":"section"},{"location":"results.html#Official-GAMS-outputs:-2","page":"Results","title":"Official GAMS outputs:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\n# Data from the DICE2023 manual\nppm_gams = CSV.read(IOBuffer(\"\"\"\nscen       2020  2025  2050  2100   2150\ncbopt     416.2 429.9 487.8 569.2  497.9 \nt2c       416.2 429.9 474.7 474.7  437.9      \naltdam    416.2 429.8 466.7 458.5  401.0  \nparisext  416.2 430.1 501.3 652.5  763.5    \nbase      416.2 430.9 517.7 774.9 1144.0 \nr5        416.2 429.7 495.7 635.5  671.6\nr4        416.2 430.4 491.8 605.3  592.0\nr3        416.2 431.2 484.0 555.1  494.2\nr2        416.2 431.9 473.8 484.9  419.3\nr1        416.2 432.0 473.3 449.5  389.3\n\"\"\"), DataFrame, delim=\" \", ignorerepeated=true)\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"ppm_gams #hide","category":"page"},{"location":"results.html#DICEModel.jl-output-2","page":"Results","title":"DICEModel.jl output","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nscenarios_ppm = [\"cbopt\",\"t2c\",\"altdam\",\"parisext\",\"base\",\"r5\",\"r4\",\"r3\",\"r2\",\"r1\"]\nppm = DataFrame([\n    scenarios_ppm,\n    [results[s].ppm[1] for s in scenarios_ppm],\n    [results[s].ppm[2] for s in scenarios_ppm],\n    [results[s].ppm[7] for s in scenarios_ppm],\n    [results[s].ppm[17] for s in scenarios_ppm],\n    [results[s].ppm[27] for s in scenarios_ppm],\n    ],\n    [\"scen\",\"2020\",\"2025\",\"2050\",\"2100\",\"2150\"]\n)\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"ppm #hide","category":"page"},{"location":"results.html#Differences:-2","page":"Results","title":"Differences:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nppm_diff = copy(ppm_gams);\nppm_diff[:,2:end] .= ppm_gams[:,2:end] .- ppm[:,2:end]\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"ppm_diff #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"Again, the only minor difference is for r5 in 2150.","category":"page"},{"location":"results.html#Plot:-2","page":"Results","title":"Plot:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nscenarios_plot=[\"base\",\"cbopt\",\"parisext\",\"t2c\",\"r2\",\"r1\"]\nfor(i,s) in enumerate(scenarios_plot)\n    if i == 1\n        global p = plot(times[1:17] ,results[s].ppm[1:17],ylim=(400,800), title=\"CO₂ concentrations\",ylabel=\"ppm\";plot_attributes[s]...);\n    else\n        plot!(times[1:17] ,results[s].ppm[1:17];plot_attributes[s]...)\n    end\nend\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"p #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"","category":"page"},{"location":"results.html#TATM:-Global-Temperatures-[C-diff-since-1765]","page":"Results","title":"TATM: Global Temperatures [°C diff since 1765]","text":"","category":"section"},{"location":"results.html#Official-GAMS-outputs:-3","page":"Results","title":"Official GAMS outputs:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\n# Data from the DICE2023 manual\nTATM_gams = CSV.read(IOBuffer(\"\"\"\nscen       2020  2025  2050  2100  2150\ncbopt      1.25  1.42  1.92  2.58  2.29\nt2c        1.25  1.42  1.85  2.00  1.86     \naltdam     1.25  1.42  1.81  1.89  1.58 \nparisext   1.25  1.43  2.01  3.00  3.61   \nbase       1.25  1.43  2.10  3.55  4.91\nr5         1.25  1.42  1.97  2.93  3.24\nr4         1.25  1.43  1.95  2.77  2.84\nr3         1.25  1.43  1.90  2.49  2.26\nr2         1.25  1.43  1.84  2.07  1.73\nr1         1.25  1.43  1.84  1.81  1.49\n\"\"\"), DataFrame, delim=\" \", ignorerepeated=true)\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"TATM_gams #hide","category":"page"},{"location":"results.html#DICEModel.jl-output-3","page":"Results","title":"DICEModel.jl output","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nscenarios_TATM = [\"cbopt\",\"t2c\",\"altdam\",\"parisext\",\"base\",\"r5\",\"r4\",\"r3\",\"r2\",\"r1\"]\nTATM = DataFrame([\n    scenarios_TATM,\n    [results[s].TATM[1] for s in scenarios_TATM],\n    [results[s].TATM[2] for s in scenarios_TATM],\n    [results[s].TATM[7] for s in scenarios_TATM],\n    [results[s].TATM[17] for s in scenarios_TATM],\n    [results[s].TATM[27] for s in scenarios_TATM],\n    ],\n    [\"scen\",\"2020\",\"2025\",\"2050\",\"2100\",\"2150\"]\n)\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"TATM #hide","category":"page"},{"location":"results.html#Differences:-3","page":"Results","title":"Differences:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nTATM_diff = copy(TATM_gams);\nTATM_diff[:,2:end] .= TATM_gams[:,2:end] .- TATM[:,2:end]\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"TATM_diff #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"Again, the only minor difference is for r5 in 2150 (3.25 instead of 3.24)","category":"page"},{"location":"results.html#Plot:-3","page":"Results","title":"Plot:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nscenarios_plot=[\"base\",\"cbopt\",\"parisext\",\"t2c\",\"r4\",\"r2\"]\nfor(i,s) in enumerate(scenarios_plot)\n    if i == 1\n        global p = plot(times[1:17] ,results[s].TATM[1:17],ylim=(0.0,4.0), title=\"Global Temperatures\",ylabel=\"°C from 1765\";plot_attributes[s]...);\n    else\n        plot!(times[1:17] ,results[s].TATM[1:17];plot_attributes[s]...)\n    end\nend\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"p #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"","category":"page"},{"location":"results.html#MIU:-Emission-control-rate-[%]","page":"Results","title":"MIU: Emission control rate [%]","text":"","category":"section"},{"location":"results.html#Official-GAMS-outputs:-4","page":"Results","title":"Official GAMS outputs:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\n# Data from the DICE2023 manual\nMIU_gams = CSV.read(IOBuffer(\"\"\"\nscen    2020 2030 2040 2050 2060 2100\ncbopt      5   24   31   39   46   84\nt2c        5   24   42   55   69   99   \naltdam     5   24   48   65   76  100\nparisext   5   13   21   27   33   57 \nbase       5    6    8   10   12   22\nr5         5   19   23   29   34   60\nr4         5   24   29   36   42   70\nr3         5   24   39   47   54   85\nr2         5   24   48   66   73  100\nr1         5   24   48   72   90  100\n\"\"\"), DataFrame, delim=\" \", ignorerepeated=true)\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"MIU_gams #hide","category":"page"},{"location":"results.html#DICEModel.jl-output-4","page":"Results","title":"DICEModel.jl output","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nscenarios_MIU = [\"cbopt\",\"t2c\",\"altdam\",\"parisext\",\"base\",\"r5\",\"r4\",\"r3\",\"r2\",\"r1\"]\nMIU = DataFrame([\n    scenarios_MIU,\n    [results[s].MIU[1] for s in scenarios_MIU] .* 100,\n    [results[s].MIU[3] for s in scenarios_MIU] .* 100,\n    [results[s].MIU[5] for s in scenarios_MIU] .* 100,\n    [results[s].MIU[7] for s in scenarios_MIU] .* 100,\n    [results[s].MIU[9] for s in scenarios_MIU] .* 100,\n    [results[s].MIU[17] for s in scenarios_MIU] .* 100,\n    ],\n    [\"scen\",\"2020\",\"2030\",\"2040\",\"2050\",\"2060\",\"2100\"]\n)\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"MIU #hide","category":"page"},{"location":"results.html#Differences:-4","page":"Results","title":"Differences:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nMIU_diff = copy(MIU);\nMIU_diff[:,2:end] .= MIU_gams[:,2:end] .- MIU[:,2:end]\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"MIU_diff #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"No differences here !","category":"page"},{"location":"results.html#Plot:-4","page":"Results","title":"Plot:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nscenarios_plot=[\"cbopt\",\"parisext\",\"t2c\",\"altdam\"]\nfor(i,s) in enumerate(scenarios_plot)\n    if i == 1\n        global p = plot(times[1:17] ,results[s].MIU[1:17] .* 100,ylim=(0.0,100), title=\"Emission control rate\",ylabel=\"%\";plot_attributes[s]...);\n    else\n        plot!(times[1:17] ,results[s].MIU[1:17] .* 100;plot_attributes[s]...)\n    end\nend\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"p #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"","category":"page"},{"location":"results.html#CPRICE:-Carbon-price-[2019-/-tCO]","page":"Results","title":"CPRICE: Carbon price [2019$ / tCO₂]","text":"","category":"section"},{"location":"results.html#Plot:-5","page":"Results","title":"Plot:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nscenarios_plot=[\"cbopt\",\"parisext\",\"t2c\",\"r3\"]\nfor(i,s) in enumerate(scenarios_plot)\n    if i == 1\n        global p = plot(times[1:9] ,results[s].CPRICE[1:9],ylim=(0,350), title=\"Carbon price\",ylabel=\"2019\\$ / tCO₂\";plot_attributes[s]...);\n    else\n        plot!(times[1:9] ,results[s].CPRICE[1:9];plot_attributes[s]...)\n    end\nend\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"p #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"","category":"page"},{"location":"results.html#scc:-Social-cost-of-carbon-[2019-/-tCO]","page":"Results","title":"scc: Social cost of carbon [2019$ / tCO₂]","text":"","category":"section"},{"location":"results.html#Official-GAMS-outputs:-5","page":"Results","title":"Official GAMS outputs:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\n# Data from the DICE2023 manual\nscc_gams = CSV.read(IOBuffer(\"\"\"\nscen       2020  2025  2050\ncbopt        50    59   125\nt2c          75    89   213\nt15c       3557  4185 16552          \naltdam      124   146   281\nparisext     61    72   159     \nbase         66    78   175\nr5           32    37    74\nr4           49    58   107\nr3           87   102   172         \nr2          176   207   302\nr1          485   571   695\n\"\"\"), DataFrame, delim=\" \", ignorerepeated=true)\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"scc_gams #hide","category":"page"},{"location":"results.html#DICEModel.jl-output-5","page":"Results","title":"DICEModel.jl output","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nscenarios_scc = [\"cbopt\",\"t2c\",\"t15c\", \"altdam\",\"parisext\",\"base\",\"r5\",\"r4\",\"r3\",\"r2\",\"r1\"]\nscc = DataFrame([\n    scenarios_scc,\n    [results[s].scc[1] for s in scenarios_scc],\n    [results[s].scc[2] for s in scenarios_scc],\n    [results[s].scc[7] for s in scenarios_scc],\n    ],\n    [\"scen\",\"2020\",\"2025\",\"2050\"]\n)\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"scc #hide","category":"page"},{"location":"results.html#Differences:-5","page":"Results","title":"Differences:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nscc_diff = copy(scc);\nscc_diff[:,2:end] .= scc_gams[:,2:end] .- scc[:,2:end]\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"scc_diff #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"This is the only part that still needs to be checked, as there are significant differences for the base year (2020). For the other years DICEModel.jl provides identical results (up to the approximation of the data published) than the official GAMS version.","category":"page"},{"location":"results.html#Plot:-6","page":"Results","title":"Plot:","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nscenarios_plot=[\"base\",\"cbopt\",\"t2c\",\"altdam\",\"r4\",\"r2\"]\nfor(i,s) in enumerate(scenarios_plot)\n    if i == 1\n        global p = plot(times[1:7] ,results[s].scc[1:7],ylim=(0,400), title=\"Social cost of carbon\",ylabel=\"2019\\$ / tCO₂\";plot_attributes[s]...);\n    else\n        plot!(times[1:7] ,results[s].scc[1:7];plot_attributes[s]...)\n    end\nend\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"p #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"","category":"page"},{"location":"results.html#Detailed-model-output","page":"Results","title":"Detailed model output","text":"","category":"section"},{"location":"results.html","page":"Results","title":"Results","text":"The whole model output (variables and post-processing computed values) can be retrieved in the Excel file below:","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"details: Show code\nkeys(results[\"cbopt\"]) \nout_vars = [v for v in keys(results[\"cbopt\"]) if typeof(results[\"cbopt\"][v]) <: Vector{<: Number}]\n\nall_results = DataFrame(\n    scenario = String[],\n    variable = String[],\n    year     = Int64[],\n    value    = Float64[],\n)\n\nfor s in scenarios, v in out_vars, ti in 1:length(times)\n    push!(all_results,[s,string(v),times[ti],results[s][v][ti]])\nend\nall_results = unstack(all_results,\"year\",\"value\")\n\nXLSX.writetable(\"DICEModelDetailedResults.xlsx\",\nall_results=(collect(DataFrames.eachcol(all_results)),DataFrames.names(all_results))\n)\nnothing #hide","category":"page"},{"location":"results.html","page":"Results","title":"Results","text":"DICEModelDetailedResults.xlsx","category":"page"},{"location":"index.html#DICEModel.jl","page":"Index","title":"DICEModel.jl","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"Documentation for DICEModel.jl, a Julia/JuMP port of the Nordhaus' DICE (Dynamic Integrated Climate-Economy model) and Nordhaus/Yang RICE (Regional Integrated Climate-Economy model) models.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"This package currently implements \"exactly\" (in structure, data and hence output) the DICE2023-b-4-3-10.gms gams version and generalize it introducing a regional dimension that can be used to implement RICE-like models.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"This program and output is not the original Barrage/Nordhaus version, which is currently only available in GAMS.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"While DICEModel.jl is implemented in Julia it can easily be used in Python or R using the JuliaCall (Python) and JuliaCall (R) packages respectively. ","category":"page"},{"location":"index.html#Available-documentation","page":"Index","title":"Available documentation","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"run_dice_scenario(scenario_name): run one of the \"official\" 10 scenarios (browse code);\nrun_dice(;optimizer,bounds,kwargs...): run DICE with custom solver engine (and eventually options), custom variable constraints (bounds) or custom parameters (browse code);\nDICEParameters: Available parameters to use with the run_dice function\nDICE2023(;kwargs...): Instantiate a DICEParameters struct with defaults parameters to DICE2023 (single region)\nDICE2023_NREG(n;kwargs...): Build parameters for a DICE2023 world partitioned in n equal regions (unless parameters are overrided)\nRICE2023(;kwargs...): Build parameters calibrated to have the DICE2023 world totals and the 12-regions RICE2020 regional distribution.","category":"page"},{"location":"index.html#Results","page":"Index","title":"Results","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"In both cases the output (results) is a named tuple. Use keys(results) to find the available information (or just look at the source code) and results.VARIABLEX to obtain the values.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"A summary of the main results, and a comparision with the official Barrage/Nordhaus DICE2023 version, is available on this page.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"Som()e results of the multi-regional implementations are here.","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"An Excel version of all the results for DICE2023 is available here.","category":"page"},{"location":"index.html#Example","page":"Index","title":"Example","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"using Pkg\nPkg.activate(@__DIR__)\nPkg.add([\"DICEModel\",\"Plots\"]) # run only once, then comment out\nusing DICEModel, Plots\n\n# CB Optimal scenario...\nres_cbopt    = run_dice_scenario(\"cbopt\")\n\n# Base scenario...\nres_base    = run_dice_scenario(\"base\")\n\n# Paris \"extended\" scenario...\ntidx = 1:81\n# upper limit to emissions mitigation rate\nmiuup = @. min( 0.05 + 0.04*(tidx-1) - 0.01*max(0,tidx-5)  ,1.00) \nres_parisext = run_dice(miuup = miuup) # or simply: run_dice_scenario(\"parisext\")\n\n# Max 2 °C scenario...\nres_t2c = run_dice(bounds = Dict(\"TATM\"=>(\"<=\",2.0))) # or simply: run_dice_scenario(\"t2c\")\n\n# Plots\ntimes = res_cbopt.times\n\n# CO2 emissions plot...\nplot(times[1:11],res_cbopt.ECO2[1:11],ylim=(0,70), title=\"CO₂ emissions\",ylabel=\"GtCO₂/yr\",label=\"C/B optimal\", color=:blue4, markershape=:circle, markercolor=:white)\nplot!(times[1:11],res_base.ECO2[1:11], label=\"Base\", colour=:goldenrod3, markershape=:circle, markercolor=:goldenrod3)\nplot!(times[1:11],res_parisext.ECO2[1:11], label=\"Paris ext\", colour=:red, linestyle=:dash)\nplot!(times[1:11],res_t2c.ECO2[1:11], label=\"T < 2 °C\", colour=:green, markershape=:cross, markercolor=:green)\n\n# Carbon price plot...\nplot(times[1:9],res_cbopt.CPRICE[1:9],ylim=(0,300), title=\"Carbon price\",ylabel=\"2019\\$ / t tCO₂\",label=\"C/B optimal\", color=:blue4, markershape=:circle, markercolor=:white)\nplot!(times[1:9],res_base.CPRICE[1:9], label=\"Base\", colour=:goldenrod3, markershape=:circle, markercolor=:goldenrod3)\nplot!(times[1:9],res_parisext.CPRICE[1:9], label=\"Paris ext\", colour=:red, linestyle=:dash)\nplot!(times[1:9],res_t2c.CPRICE[1:9], label=\"T < 2 °C\", colour=:green, markershape=:cross, markercolor=:green)","category":"page"},{"location":"index.html","page":"Index","title":"Index","text":"<img src=\"https://github.com/sylvaticus/DICEModel.jl/blob/main/assets/imgs/CO%E2%82%82_emissions.png?raw=true\" width=\"300\"/><img src=\"https://github.com/sylvaticus/DICEModel.jl/blob/main/assets/imgs/Carbon_price.png?raw=true\" width=\"300\"/>","category":"page"},{"location":"index.html#Licence","page":"Index","title":"Licence","text":"","category":"section"},{"location":"index.html","page":"Index","title":"Index","text":"The licence of the original GAMS code has never being specified. The Julia port itself (and only that) is MIT.","category":"page"}]
}
